ACL in DB:

    CREATE TABLE ac_roles (
       id serial,
       name varchar(32) not null, 
       description text, 
       unique(name)
    )engine=InnoDB charset=utf8 comment="storing roles";
    
    CREATE TABLE ac_access_list ( 
       id serial,
       roles_name varchar(32) not null, 
       resources_name varchar(32) not null, 
       access_name varchar(32) not null, 
       allowed int(3) not null, 
       unique(roles_name, resources_name, access_name)
    )engine=InnoDB charset=utf8 comment="control access for controller/action";
    
    CREATE TABLE ac_resources (
       id serial,
       name varchar(32) not null, 
       description text, 
       unique(name)
    )engine=InnoDB charset=utf8 comment="list of controller";
    
    CREATE TABLE ac_resources_accesses (
       id serial,
       resources_name varchar(32) not null, 
       access_name varchar(32) not null, 
       unique(resources_name, access_name)
    )engine=InnoDB charset=utf8 comment="list of controller/action";
    
    CREATE TABLE ac_roles_inherits (
       id serial,
       roles_name varchar(32) not null, 
       roles_inherit varchar(32) not null, 
       unique(roles_name, roles_inherit)
    )engine=InnoDB charset=utf8 comment="privileges for roles to inherit from";

Config ACL

    //Create the ACL
    $acl = new ACLDatabaseAdapter(array(
        'db' => $dbConnection,
        'roles' => 'ac_roles',
        'rolesInherits' => 'ac_roles_inherits',
        'resources' => 'ac_resources',
        'resourcesAccesses' => 'ac_resources_accesses',
        'accessList' => 'ac_access_list',
    ));
    
    //The default action is DENY access
    $acl->setDefaultAction(Phalcon\Acl::DENY);
    
    Usage of ACL:
    
    //By default the action is deny access
    $acl->setDefaultAction(Phalcon\Acl::DENY);
    
    //You can add roles/resources/accesses to list or insert them directly in the tables
    
    //Add roles
    $acl->addRole(new Phalcon\Acl\Role('Admins'));
    
    //Create the resource with its accesses
    $acl->addResource('Products', array('insert', 'update', 'delete'));
    
    //Allow Admins to insert products
    $acl->allow('Admin', 'Products', 'insert');

ACLDatabaseAdapter.php

    <?php
    use Phalcon\Db;
    use Phalcon\Acl\Adapter;
    use Phalcon\Acl\AdapterInterface;
    use Phalcon\Acl\Exception;
    use Phalcon\Acl\Resource;
    use Phalcon\Acl;
    use Phalcon\Acl\Role;
    
    /**
     * Manages ACL lists in Database
     */
    class ACLDatabaseAdapter extends Adapter implements AdapterInterface
    {
    
        /**
         * @var array
         */
        protected $options;
    
        /**
         * Class constructor.
         *
         * @param  array                  $options
         * @throws \Phalcon\Acl\Exception
         */
        public function __construct(array $options){
            
            if (!isset($options['db'])) {
                throw new Exception("Parameter 'db' is required");
            }
    
            if (!isset($options['roles'])) {
                throw new Exception("Parameter 'roles' is required");
            }
    
            if (!isset($options['resources'])) {
                throw new Exception("Parameter 'resources' is required");
            }
    
            if (!isset($options['resourcesAccesses'])) {
                throw new Exception("Parameter 'resourcesAccesses' is required");
            }
    
            if (!isset($options['accessList'])) {
                throw new Exception("Parameter 'accessList' is required");
            }
    
            $this->options = $options;
        }
    
        /**
         * {@inheritdoc}
         * Example:
         * <code>$acl->addRole(new Phalcon\Acl\Role('administrator'), 'consultor');</code>
         * <code>$acl->addRole('administrator', 'consultor');</code>
         *
         * @param  \Phalcon\Acl\Role|string $role
         * @param  string                   $accessInherits
         * @return boolean
         */
        public function addRole($role, $accessInherits = null){
            if (!is_object($role)) {
                $role = new Role($role);
            }
    
            $exists = $this->options['db']->fetchOne(
                'SELECT COUNT(*) AS count FROM ' . $this->options['roles'] . ' WHERE name = ?',
                null,
                array($role->getName())
            );
    
            if (!$exists['count']) {
                $this->options['db']->execute(
                    'INSERT INTO ' . $this->options['roles'] . ' VALUES (null, ?, ?)',
                    array($role->getName(), $role->getDescription())
                );
    
                $this->options['db']->execute(
                    'INSERT INTO ' . $this->options['accessList'] . ' VALUES (null, ?, ?, ?, ?)',
                    array($role->getName(), '*', '*', $this->_defaultAccess)
                );
            }
    
            if ($accessInherits) {
                return $this->addInherit($role->getName(), $accessInherits);
            }
    
            return true;
        }
    
        /**
         * {@inheritdoc}
         *
         * @param  string                 $roleName
         * @param  string                 $roleToInherit
         * @throws \Phalcon\Acl\Exception
         */
        public function addInherit($roleName, $roleToInherit)
        {
            $sql = 'SELECT COUNT(*) AS count FROM ' . $this->options['roles'] . ' WHERE name = ?';
            $exists = $this->options['db']->fetchOne($sql, null, array($roleToInherit));
            if (!$exists['count']) {
                throw new Exception("Role '" . $roleToInherit . "' does not exist in the role list");
            }
    
            $exists = $this->options['db']->fetchOne(
                'SELECT COUNT(*) AS count FROM ' . $this->options['rolesInherits'] . ' WHERE roles_name = ? AND roles_inherit = ?',
                null,
                array($roleName, $roleToInherit)
            );
    
            if (!$exists['count']) {
                $this->options['db']->execute(
                    'INSERT INTO ' . $this->options['rolesInherits'] . ' VALUES (null, ?, ?)',
                    array($roleName, $roleToInherit)
                );
            }
        }
    
        /**
         * {@inheritdoc}
         *
         * @param  string  $roleName
         * @return boolean
         */
        public function isRole($roleName)
        {
            $exists = $this->options['db']->fetchOne(
                'SELECT COUNT(*) AS count FROM ' . $this->options['roles'] . ' WHERE name = ?',
                null,
                array($roleName)
            );
    
            return $exists['count'] === 0 ? false : true;
        }
    
        /**
         * {@inheritdoc}
         *
         * @param  string  $resourceName
         * @return boolean
         */
        public function isResource($resourceName)
        {
            $exists = $this->options['db']->fetchOne(
                'SELECT COUNT(*) AS count FROM ' . $this->options['resources'] . ' WHERE name = ?',
                null,
                array($resourceName)
            );
    
            return (bool) $exists['count'];
        }
    
        /**
         * {@inheritdoc}
         * Example:
         * <code>
         * //Add a resource to the the list allowing access to an action
         * $acl->addResource(new Phalcon\Acl\Resource('customers'), 'search');
         * $acl->addResource('customers', 'search');
         * //Add a resource  with an access list
         * $acl->addResource(new Phalcon\Acl\Resource('customers'), array('create', 'search'));
         * $acl->addResource('customers', array('create', 'search'));
         * </code>
         *
         * @param  \Phalcon\Acl\Resource|string $resource
         * @param  array|string                 $accessList
         * @return boolean
         */
        public function addResource($resource, $accessList = null)
        {
            if (!is_object($resource)) {
                $resource = new Resource($resource);
            }
    
            $exists = $this->options['db']->fetchOne(
                'SELECT COUNT(*) AS count FROM ' . $this->options['resources'] . ' WHERE name = ?',
                null,
                array($resource->getName())
            );
    
            if (!$exists['count']) {
                $this->options['db']->execute(
                    'INSERT INTO ' . $this->options['resources'] . ' VALUES (null, ?, ?)',
                    array($resource->getName(), $resource->getDescription())
                );
            }
    
            if ($accessList) {
                return $this->addResourceAccess($resource->getName(), $accessList);
            }
    
            return true;
        }
    
        /**
         * {@inheritdoc}
         *
         * @param  string                 $resourceName
         * @param  array|string           $accessList
         * @return boolean
         * @throws \Phalcon\Acl\Exception
         */
        public function addResourceAccess($resourceName, $accessList)
        {
    
            if (!$this->isResource($resourceName)) {
                throw new Exception("Resource '" . $resourceName . "' does not exist in ACL");
            }
    
            $sql = 'SELECT COUNT(*) AS count FROM ' .
                $this->options['resourcesAccesses'] .
                ' WHERE resources_name = ? AND access_name = ?';
            if (is_array($accessList)) {
                foreach ($accessList as $accessName) {
                    $exists = $this->options['db']->fetchOne($sql, null, array($resourceName, $accessName));
                    if (!$exists['count']) {
                        $this->options['db']->execute(
                            'INSERT INTO ' . $this->options['resourcesAccesses'] . ' VALUES (null, ?, ?)',
                            array($resourceName, $accessName)
                        );
                    }
                }
            } else {
                $exists = $this->options['db']->fetchOne($sql, null, array($resourceName, $accessList));
                if (!$exists[0]) {
                    $this->options['db']->execute(
                        'INSERT INTO ' . $this->options['resourcesAccesses'] . ' VALUES (null, ?, ?)',
                        array($resourceName, $accessList)
                    );
                }
            }
    
            return true;
        }
    
        /**
         * {@inheritdoc}
         *
         * @return \Phalcon\Acl\Resource[]
         */
        public function getResources()
        {
            $resources = array();
            $sql       = 'SELECT * FROM ' . $this->options['resources'];
    
            foreach ($this->options['db']->fetchAll($sql, Db::FETCH_ASSOC) as $row) {
                $resources[] = new Resource($row['name'], $row['description']);
            }
    
            return $resources;
        }
    
        /**
         * {@inheritdoc}
         *
         * @return \Phalcon\Acl\Role[]
         */
        public function getRoles()
        {
            $roles = array();
            $sql   = 'SELECT * FROM ' . $this->options['roles'];
    
            foreach ($this->options['db']->fetchAll($sql, Db::FETCH_ASSOC) as $row) {
                $roles[] = new Role($row['name'], $row['description']);
            }
    
            return $roles;
        }
    
        /**
         * {@inheritdoc}
         *
         * @param string       $resourceName
         * @param array|string $accessList
         */
        public function dropResourceAccess($resourceName, $accessList)
        {
        }
    
        /**
         * {@inheritdoc}
         * You can use '*' as wildcard
         * Example:
         * <code>
         * //Allow access to guests to search on customers
         * $acl->allow('guests', 'customers', 'search');
         * //Allow access to guests to search or create on customers
         * $acl->allow('guests', 'customers', array('search', 'create'));
         * //Allow access to any role to browse on products
         * $acl->allow('*', 'products', 'browse');
         * //Allow access to any role to browse on any resource
         * $acl->allow('*', '*', 'browse');
         * </code>
         *
         * @param string       $roleName
         * @param string       $resourceName
         * @param array|string $access
         */
        public function allow($roleName, $resourceName, $access){
    
            $this->allowOrDeny($roleName, $resourceName, $access, Acl::ALLOW);
        }
    
        /**
         * {@inheritdoc}
         * You can use '*' as wildcard
         * Example:
         * <code>
         * //Deny access to guests to search on customers
         * $acl->deny('guests', 'customers', 'search');
         * //Deny access to guests to search or create on customers
         * $acl->deny('guests', 'customers', array('search', 'create'));
         * //Deny access to any role to browse on products
         * $acl->deny('*', 'products', 'browse');
         * //Deny access to any role to browse on any resource
         * $acl->deny('*', '*', 'browse');
         * </code>
         *
         * @param  string       $roleName
         * @param  string       $resourceName
         * @param  array|string $access
         * @return boolean
         */
        public function deny($roleName, $resourceName, $access){
    
            $this->allowOrDeny($roleName, $resourceName, $access, Acl::DENY);
        }
    
        /**
         * {@inheritdoc}
         * Example:
         * <code>
         * //Does Andres have access to the customers resource to create?
         * $acl->isAllowed('Andres', 'Products', 'create');
         * //Do guests have access to any resource to edit?
         * $acl->isAllowed('guests', '*', 'edit');
         * </code>
         *
         * @param string $role
         * @param string $resource
         * @param string $access
         *
         * @return bool
         */
        public function isAllowed($role, $resource, $access)
        {
            $sql = implode(' ', array(
                'SELECT allowed FROM', $this->options['accessList'], 'AS a',
                // role_name in:
                'WHERE roles_name IN (',
                    // given 'role'-parameter
                    'SELECT ? ',
                    // inherited role_names
                    'UNION SELECT roles_inherit FROM', $this->options['rolesInherits'], 'WHERE roles_name = ?',
                    // or 'any'
                    "UNION SELECT '*'",
                ')',
                // resources_name should be given one or 'any'
                "AND resources_name IN (?, '*')",
                // access_name should be given one or 'any'
                "AND access_name IN (?, '*')",
                // order be the sum of bools for 'literals' before 'any'
                "ORDER BY (roles_name != '*')+(resources_name != '*')+(access_name != '*') DESC",
                // get only one...
                'LIMIT 1'
            ));
            
            // fetch one entry...
            $allowed = $this->options['db']->fetchOne($sql, Db::FETCH_NUM, array($role, $role, $resource, $access));
            if (is_array($allowed)) {
                return (bool) $allowed[0];
            }
    
            /**
             * Return the default access action
             */
    
            return $this->_defaultAccess;
        }
    
        /**
         * Inserts/Updates a permission in the access list
         *
         * @param  string                 $roleName
         * @param  string                 $resourceName
         * @param  string                 $accessName
         * @param  integer                $action
         * @return boolean
         * @throws \Phalcon\Acl\Exception
         */
        protected function insertOrUpdateAccess($roleName, $resourceName, $accessName, $action){
    
            /**
             * Check if the access is valid in the resource
             */
            $sql = 'SELECT COUNT(*) AS count FROM ' .
                $this->options['resourcesAccesses'] .
                ' WHERE resources_name = ? AND access_name = ?';
            $exists = $this->options['db']->fetchOne($sql, null, array($resourceName, $accessName));
            if (!$exists['count']) {
                throw new Exception(
                    "Access '" . $accessName . "' does not exist in resource '" . $resourceName . "' in ACL"
                );
            }
    
            /**
             * Update the access in access_list
             */
            $sql = 'SELECT COUNT(*) AS count FROM ' .
                $this->options['accessList'] .
                ' WHERE roles_name = ? AND resources_name = ? AND access_name = ?';
            $exists = $this->options['db']->fetchOne($sql, null, array($roleName, $resourceName, $accessName));
            if (!$exists['count']) {
                $sql = 'INSERT INTO ' . $this->options['accessList'] . ' VALUES (null, ?, ?, ?, ?)';
                $params = array($roleName, $resourceName, $accessName, $action);
            } else {
                $sql = 'UPDATE ' .
                    $this->options['accessList'] .
                    ' SET allowed = ? WHERE roles_name = ? AND resources_name = ? AND access_name = ?';
                $params = array($action, $roleName, $resourceName, $accessName);
            }
    
            $this->options['db']->execute($sql, $params);
    
            /**
             * Update the access '*' in access_list
             */
            $sql = 'SELECT COUNT(*) AS count FROM ' .
                $this->options['accessList'] .
                ' WHERE roles_name = ? AND resources_name = ? AND access_name = ?';
            $exists = $this->options['db']->fetchOne($sql, null, array($roleName, $resourceName, '*'));
            if (!$exists['count']) {
                $sql = 'INSERT INTO ' . $this->options['accessList'] . ' VALUES (null, ?, ?, ?, ?)';
                $this->options['db']->execute($sql, array($roleName, $resourceName, '*', $this->_defaultAccess));
            }
    
            return true;
        }
    
        /**
         * Inserts/Updates a permission in the access list
         *
         * @param  string                 $roleName
         * @param  string                 $resourceName
         * @param  array|string           $access
         * @param  integer                $action
         * @throws \Phalcon\Acl\Exception
         */
        protected function allowOrDeny($roleName, $resourceName, $access, $action)
        {
            if (!$this->isRole($roleName)) {
                throw new Exception('Role "' . $roleName . '" does not exist in the list');
            }
    
            if (is_array($access)) {
                foreach ($access as $accessName) {
                    $this->insertOrUpdateAccess($roleName, $resourceName, $accessName, $action);
                }
            } else {
                $this->insertOrUpdateAccess($roleName, $resourceName, $access, $action);
            }
        }
    }
